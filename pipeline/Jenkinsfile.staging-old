#!/usr/bin/env groovy

def configuration = [
  vaultUrl: 'https://dti-vault.unilab.edu.br',
  vaultCredentialId: 'id-3s-role',
  engineVersion: 2
]

def secrets = [
  [path: 'secret/3s/config', engineVersion: 2, secretValues: [
    [envVar: 'PG_USER', vaultKey: 'pg_user'],
    [envVar: 'PG_PASSWORD', vaultKey: 'pg_password'],
    [envVar: 'PG_USER_ROOT', vaultKey: 'pg_user_root'],
    [envVar: 'PG_ROOT_PASSWORD', vaultKey: 'pg_root_password'],
    [envVar: 'DB_USER_DUMP', vaultKey: 'db_user_dump'],
    [envVar: 'DB_PASSWORD_DUMP', vaultKey: 'db_password_dump']
  ]],
]

pipeline {
  agent {
    kubernetes {
      yamlFile './kubernetes/agent/jenkins-agent-pod-k8s.yaml'
      inheritFrom 'inbound'
      idleMinutes 5
      defaultContainer 'php8'
    }
  }

  options {
    timestamps()
    timeout(time: 24, unit: 'HOURS')
    parallelsAlwaysFailFast()
    rateLimitBuilds(throttle: [count: 3, durationName: 'minute', userBoost: false])
    ansiColor('xterm')
    buildDiscarder(logRotator(numToKeepStr: '20'))
    disableConcurrentBuilds()
  }

  environment {
    /* Gerais */
    APP_NAME = "app-3s"
    APP_NAMESPACE = "app-3s"
    APP_EP_PROD = "dti-app-test-c1.unilab.edu.br"
    APP_EP_STAG = "3shomologacao.unilab.edu.br"
    APP_VERSION = "Beta"
    DOCKER_TAG = "${env.GIT_BRANCH.split('/')[-1]}"
    DOCKER_IMAGE = "dti-registro.unilab.edu.br/unilab/${APP_NAME}"
    BUILD_NUMBER = "${env.BUILD_NUMBER}"
    DOCKER_BUILDKIT = 1
    TF_IN_AUTOMATION = 1
    THREAD_COUNT = 6
    SEMGREP_TIMEOUT = "300"
    JENKINS_URL = "https://dti-jenkins.unilab.edu.br"
    RECIPIENT_LEAD_EMAILS = "erivandoramos@unilab.edu.br, jefponte@unilab.edu.br"
    RECIPIENT_TEAM_EMAILS = "erivandosena@gmail.com, j.pontee@gmail.com"
    VAULT_ADDR = "https://dti-vault.unilab.edu.br"
    SONAR_URL = "https://dti-sonar.unilab.edu.br"
    SONAR_PROJECT_KEY = "app-3s-prod"

    /* Database 3S */
    PG_USER = "*"
    PG_PASSWORD = "*"
    PG_USER_ROOT = "*"
    PG_ROOT_PASSWORD = "*"
    PG_DATABASE = "3s-ocorrencias"
    PG_DATABASE_HOMOLOGACAO = "3s-homologacao"
    PG_HOST = "10.130.0.154"
    PG_PORT = "5432"

    /* Database Migrations */
    DB_MIGRATE_STATUS = "MIGRADO" // MIGRADO | NAO-MIGRADO (default)
    DB_USER_DUMP = "*"
    DB_PASSWORD_DUMP = "*"
    DB_DATABASE_DUMP = "ocorrencias"
    HOST_DUMP = "200.129.19.134"
    PORT_DUMP = "5432"
    USER_OWNER_DATABASE_DUMP = "ocorrencias_user"
    USERS_DUMP = '"cicero_robson" "luansidney" "manoeljr" "rafael" "tiago17" "admindti" "3s"'
    PGPASSFILE = "/home/jenkins/agent/workspace/.pgpass"
  }

  stages {
    stage('Iniciando CI/CD') {
      steps {
        milestone(ordinal: null, label: "Milestone: Setup")
        script {
          currentBuild.displayName = "$BUILD_DISPLAY_NAME (${GIT_COMMIT.take(8)})"
          workspace = "$env.WORKSPACE"
        }

        // executar alguns comandos shell para configurar outros detalhes.
        sh '''
          # Instala pacotes
          apt-get update && apt-get upgrade -y
          apt-get install -y locales sudo curl wget postgresql-client unzip rsync procps

          # Setup locale
          DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales
          sed -i 's/# pt_BR.UTF-8 UTF-8/pt_BR.UTF-8 UTF-8/' /etc/locale.gen
          locale-gen pt_BR.UTF-8
          echo LANG=pt_BR.UTF-8 | tee /etc/default/locale
          echo LC_CTYPE=pt_BR.UTF-8 | tee -a /etc/default/locale
          echo LC_ALL=pt_BR.UTF-8 | tee -a /etc/default/locale
          echo LANGUAGE=pt_BR:pt:en | tee -a /etc/default/locale

          # Instala kubectl
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
          echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
          chmod u+x ./kubectl
          install -o root -g root -m 0755 kubectl /usr/bin/kubectl
          kubectl version --client -ojson

          # Instala Vault
          curl -o vault.zip -k https://releases.hashicorp.com/vault/1.12.1/vault_1.12.1_linux_amd64.zip; yes | unzip vault.zip

          # Instala compose
          curl -sS https://getcomposer.org/installer -o composer-setup.php
          php composer-setup.php --install-dir=/usr/local/bin --filename=composer
          chown -R www-data:www-data /usr/local/bin/composer

          # Obtem o vendor
          cd source/
          composer install --ignore-platform-reqs --no-interaction --no-progress --no-scripts --optimize-autoloader
          cd ..
          mv source/.env.example source/.env
          ls -la source/
          ls -la source/public
        '''
      }
    }

    stage('SonarQube Analysis') {
      steps {
        container('maven') {
          script {
            sh 'curl -fsSLk https://deb.nodesource.com/setup_18.x | bash - && apt-get install -y nodejs'
            def branchName = env.BRANCH_NAME
            def scannerHome = tool 'SonarScanner'
            def projectKey = env.SONAR_PROJECT_KEY
            withSonarQubeEnv('SonarQube') {
              sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=${projectKey} -Dsonar.sources=new-source -Dsonar.exclusions=vendor/** -Dsonar.language=php -Dsonar.sourceEncoding=UTF-8"
              def props = readProperties  file: '.scannerwork/report-task.txt'
              def sonarServerUrl=props['serverUrl']
              def ceTaskUrl= props['ceTaskUrl']
              def ceTask
              timeout(time: 2, unit: 'MINUTES') {
                  waitUntil {
                      def response = httpRequest(url: ceTaskUrl, authentication: 'sonar-admin')
                      ceTask = readJSON text: response.content
                      return "SUCCESS".equals(ceTask["task"]["status"])
                  }
              }
              /* Quality Gate */
              def resp = httpRequest(url : sonarServerUrl + "/api/qualitygates/project_status?analysisId=" + ceTask["task"]["analysisId"], authentication: 'sonar-admin')
              def qualitygate = readJSON text: resp.content
              if ("ERROR".equals(qualitygate["projectStatus"]["status"])) {
                error "Pipeline abortada devido a falha em Quality Gate"
                waitForQualityGate abortPipeline: true
              }
            }
          }
        }
      }
    }

    stage('Testes') {
      steps {
        sh 'cd source/ && php artisan key:generate'
        sh 'source/vendor/bin/phpunit --no-extensions source/tests/'
      }
    }

    stage('Build') {
      steps {
        container('docker') {
          milestone(ordinal: null, label: "Milestone: Docker Build")
          timeout(time: 60, unit: 'MINUTES') {
            sh "docker build -f ./Dockerfile --target production -t '$DOCKER_IMAGE:$DOCKER_TAG' --build-arg 'VERSION=$APP_VERSION COMMIT_SHA=$GIT_COMMIT BUILDKIT_INLINE_CACHE=1' --no-cache ."
          }
        }
      }
    }

    stage('Push Image Container') {
      steps {
        script {
          container('docker') {
            env.VAULT_ADDR = "https://dti-vault.unilab.edu.br"
            withCredentials([
            string(credentialsId: 'role-harbor', variable: 'ROLE_ID'),
            string(credentialsId: 'token-admin', variable: 'VAULT_TOKEN')
            ]) {
              env.SECRET_ID = sh(script: './vault write -tls-skip-verify -field=secret_id -f auth/approle/role/harbor-role/secret-id', returnStdout: true).trim()
              env.VAULT_TOKEN = sh(script: './vault write -tls-skip-verify -field=token auth/approle/login role_id=${ROLE_ID} secret_id=${SECRET_ID}', returnStdout: true).trim()
              env.HARBOR_USERNAME = sh(script: './vault kv get -tls-skip-verify -field=usuario secret/harbor/config', returnStdout: true).trim()
              env.HARBOR_PASSWORD = sh(script: './vault kv get -tls-skip-verify -field=senha secret/harbor/config', returnStdout: true).trim()

              milestone(ordinal: null, label: "Milestone: Docker Push")
              timeout(time: 15, unit: 'MINUTES') {

              sh """
                echo \${HARBOR_PASSWORD} | docker login --username \${HARBOR_USERNAME} --password-stdin https://dti-registro.unilab.edu.br
                unset HARBOR_PASSWORD
                docker push \${DOCKER_IMAGE}:\${DOCKER_TAG}
              """
              }
            }
          }
        }
      }
    }

    stage('Database Migrate') {
      steps {
        script {
          if (env.DB_MIGRATE_STATUS != "MIGRADO") {

            withKubeConfig([credentialsId: 'kubeconfig-c1', serverUrl: 'https://dti-k8s-c1.unilab.edu.br:6443']) {
              sh '''
                if ! kubectl get statefulset postgres -n postgres-3s >/dev/null 2>&1; then
                  kubectl apply -f ./kubernetes/statefulSet-postgres-3s.yaml --record
                fi
                echo "Lista de recursos."
                kubectl get all,sa,ing,pvc -n postgres-3s -o wide
              '''
            }

            withVault([configuration: configuration, vaultSecrets: secrets]) {
              withEnv([
                "PG_USER=${env.PG_USER}",
                "PG_PASSWORD=${env.PG_PASSWORD}",
                "PG_USER_ROOT=${env.PG_USER_ROOT}",
                "PG_ROOT_PASSWORD=${env.PG_ROOT_PASSWORD}",
                "DB_USER_DUMP=${env.DB_USER_DUMP}",
                "DB_PASSWORD_DUMP=${env.DB_PASSWORD_DUMP}"
              ]) {
                sh """
                  echo '${env.PG_HOST}:${env.PG_PORT}:*:${env.PG_USER_ROOT}:${env.PG_ROOT_PASSWORD}' > '${env.PGPASSFILE}'
                  echo '${env.PG_HOST}:${env.PG_PORT}:*:${env.PG_USER}:${env.PG_PASSWORD}' >> '${env.PGPASSFILE}'
                  echo '${env.HOST_DUMP}:${env.PORT_DUMP}:*:${env.DB_USER_DUMP}:${env.DB_PASSWORD_DUMP}' >> '${env.PGPASSFILE}'
                  chmod 0600 '${env.PGPASSFILE}'
                  cat '${env.PGPASSFILE}'

                  chmod +x source/bash/database/setup-databases.sh
                  ./source/bash/database/setup-databases.sh
                """
              }
            }

          }
        }
      }
    }

    stage('Deploy em Staging') {
      steps {
        script {

          withVault([configuration: configuration, vaultSecrets: secrets]) {
            withEnv([
              "PG_USER=${env.PG_USER}",
              "PG_PASSWORD=${env.PG_PASSWORD}",
              "PG_USER_ROOT=${env.PG_USER_ROOT}",
              "PG_ROOT_PASSWORD=${env.PG_ROOT_PASSWORD}",
              "DB_USER_DUMP=${env.DB_USER_DUMP}",
              "DB_PASSWORD_DUMP=${env.DB_PASSWORD_DUMP}"
            ]) {

              if (env.DB_MIGRATE_STATUS != "MIGRADO") {
                sh ''' #!/bin/bash
                  chmod +x source/bash/database/dump-database.sh
                  chmod +x source/bash/database/restore-database.sh
                  ./source/bash/database/dump-database.sh
                  ./source/bash/database/restore-database.sh restore_postgres_homolog
                '''
              }

              sh """
                sed -i 's/3s@noreply.unilab.edu.br/3s-staging@noreply.unilab.edu.br/' ./kubernetes/deployment-3s.yaml
                sed -i 's/3S - Sistema de Solicitacao de Ocorrencias/[HOMOLOGAÇÃO] 3S - Sistema de Solicitacao de Ocorrencias/' ./kubernetes/deployment-3s.yaml
                sed -i 's/devops.unilab.edu.br/${env.APP_EP_STAG}/g' ./kubernetes/deployment-3s.yaml
                sed -i 's/APP_DEBUG: "false"/APP_DEBUG: "true"/' ./kubernetes/deployment-3s.yaml
                sed -i 's/LOG_LEVEL: "error"/LOG_LEVEL: "debug"/' ./kubernetes/deployment-3s.yaml
                sed -i 's/postgres.postgres-3s.svc.cluster.local/10.130.0.154/' ./kubernetes/deployment-3s.yaml
                sed -i 's/3s-ocorrencias/3s-homologacao/' ./kubernetes/deployment-3s.yaml
                sed -i 's/.db_password_sigaa/.db_password_sigaa_holog/' ./kubernetes/deployment-3s.yaml
                sed -i 's/.db_host_sigaa/.db_host_sigaa_holog/' ./kubernetes/deployment-3s.yaml
                sed -i 's/:latest/:${env.DOCKER_TAG}/' ./kubernetes/deployment-3s.yaml
                sed -i 's/auth\\/kubernetes\\/c1/auth\\/kubernetes\\/c3/' ./kubernetes/deployment-3s.yaml
                sed -i 's/10.130.0.153/10.130.2.153/' ./kubernetes/deployment-3s.yaml
                cat ./kubernetes/deployment-3s.yaml
              """
            }
          }

          withKubeConfig([credentialsId: 'kubeconfig-c3', serverUrl: 'https://dti-k8s-c3.unilab.edu.br:6443']) {
            sh """
              echo 'Verifica deploy ativo e exclui.'
              kubectl get deployment $APP_NAME -n $APP_NAMESPACE >/dev/null 2>&1 && \
              (kubectl get pods -l $APP_NAME -n $APP_NAMESPACE --no-headers | wc -l) > 0 && \
              kubectl delete pods -l app=$APP_NAME -n $APP_NAMESPACE --force --grace-period=0; \
              kubectl delete deployment $APP_NAME -n $APP_NAMESPACE || echo 'DEPLOYMENT INEXISTENTE!'

              echo 'Aplica deploy.'
              kubectl apply -f ./kubernetes/deployment-3s.yaml --record

              echo 'Lista de recursos.'
              kubectl get all,sa,ing,pvc -n $APP_NAMESPACE -o wide
            """
            env.APP_URI_STAGING = sh(script: 'kubectl get ingress app-3s -n app-3s -o jsonpath="{.spec.rules[0].host}" | sed "s/^/http:\\/\\//"', returnStdout: true).trim()
            withEnv(["APP_URI=${env.APP_URI_STAGING}"]) {
              sh 'echo Endpoint: $APP_URI_STAGING'
            }
          }
        }
      }
    }
  }

  post{
    always {
      echo 'Processo de pipeline finalizado.'
    }

    success {
      echo 'Processo de pipeline BEM-SUCEDIDO.'
      emailext (
          attachLog: false,
          attachmentsPattern: 'build.log',
          mimeType: 'text/html',
          subject: "🟢 Pipeline #${env.BUILD_NUMBER} ${currentBuild.currentResult} Job ${env.JOB_NAME}",
          body: """
          Parabéns! Team
          <p>Pipeline completada com: ${currentBuild.currentResult}<br />
          Detalhes da execução da pipeline: ${env.BUILD_URL}<br />
          Detalhes do teste de qualidade: ${env.SONAR_URL}/dashboard?id=${env.SONAR_PROJECT_KEY}</p>
          <p><strong>Endpoint de homologação: ${env.APP_URI_STAGING}</strong></p>
          <p style="font-size: 0.9em;">&#9729; O workload estar&aacute; completo em aproximadamente 90 segundos.</p><br />
          <p>${env.EMAIL_ASSINATURA}</p><hr><p>${env.EMAIL_RODAPE}</p>
          """,
          to: "${env.RECIPIENT_LEAD_EMAILS}, ${env.RECIPIENT_TEAM_EMAILS}",
          recipientProviders: []
      )
      slackSend(color: "good", message: "Pipeline #${env.BUILD_NUMBER} completada com ${currentBuild.currentResult} em ${env.JOB_NAME} (<${env.BUILD_URL}|Mais info...>)")
    }

    failure {
      echo 'Processo de pipeline executado com falha.'
      emailext (
          attachLog: true,
          attachmentsPattern: 'build.log',
          mimeType: 'text/html',
          subject: "🔴 Pipeline #${env.BUILD_NUMBER} ${currentBuild.currentResult} Job ${env.JOB_NAME}",
          body: """
          Prezados Stakeholders
          <p>Pipeline completada com: ${currentBuild.currentResult}<br />
          Detalhes da execução da pipeline: ${env.BUILD_URL}</p><br />
          <p>${env.EMAIL_ASSINATURA}</p><hr><p>${env.EMAIL_RODAPE}</p>
          """,
          to: "${env.RECIPIENT_TEAM_EMAILS}",
          recipientProviders: []
      )
      slackSend(color: "danger", message: "Pipeline #${env.BUILD_NUMBER} finalizada com ${currentBuild.currentResult} em ${env.JOB_NAME} (<${env.BUILD_URL}|Mais info...>)")
    }
  }
}