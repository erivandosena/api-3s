#!/usr/bin/env groovy

pipeline {
  agent {
    kubernetes {
      yamlFile './pipeline/jenkins-agent-pod-k8s.yaml'
      inheritFrom 'jnlp'
      idleMinutes 5
      defaultContainer 'php7'
    }
  }
  options {
    timestamps()
    timeout(time: 2, unit: 'HOURS')
    parallelsAlwaysFailFast()
    rateLimitBuilds(throttle: [count: 3, durationName: 'minute', userBoost: false])
    buildDiscarder(logRotator(numToKeepStr: '100'))
    ansiColor('xterm')
  }
  triggers {
    // https://crontab.guru/examples.html
    // pollSCM('H/60 * * * *')  // execute a cada 60 minutos, em um tempo de deslocamento consistente dentro desse intervalo de 60 minutos
    // cron('H 10 * * 1-5')  // executar às 10: XX:XX da manhã todos os dias da semana, ou seja. algum horário fixo de trabalho entre 10-11am
    cron('0 0 1 1 *') // Todo ano as 00:00 do dia 1º do mês de janeiro.
  }
  environment {
    APP_NAME = "app-3s"
    APP_VERSION = "1.0.0"
    APP_NAMESPACE = "app-3s"
    DOCKER_TAG = "${env.GIT_BRANCH.split('/')[-1]}" //retire a 'origin/' inicial de 'origin/branch'
    DOCKER_IMAGE = "dti-registro.unilab.edu.br/unilab/${APP_NAME}"
    BUILD_NUMBER = "${env.BUILD_NUMBER}"
    /*
    se criar imagens docker em agentes, isso habilita o BuildKit, que cria automaticamente camadas de imagens em paralelo sempre que possível 
    (especialmente útil para compilações de vários estágios) adicionar também '--build-arg BUILDKIT_INLINE_CACHE=1' ao comando docker build
    */
    DOCKER_BUILDKIT = 1
    TF_IN_AUTOMATION = 1
    THREAD_COUNT = 6
    SEMGREP_TIMEOUT = "300"
    SONAR_HOST_URL = "https://dti-sonar.unilab.edu.br"
  }
  stages {
    stage('CI/CD Initialize') {
      steps {  // nenhuma diretiva de conteiner é necessária para o container maven, porque ele é padrão.
        milestone(ordinal: null, label: "Milestone: Setup")
        script {
          // reescreve o nome da compilação para incluir o ID do commit
          currentBuild.displayName = "$BUILD_DISPLAY_NAME (${GIT_COMMIT.take(8)})"
          // salvar o caminho da área de trabalho para usar nos testes
          workspace = "$env.WORKSPACE"
        }
        // executar alguns comandos shell para configurar outros detalhes
        sh 'printenv'
      }
    }
    // geralmente não é necessário ao obter o Jenkinsfile do Git SCM no Pipeline / Multibranch Pipeline, isso está implícito
    stage ('Git Checkout\nGitLab') {
      steps {
        milestone(ordinal: null, label: "Milestone: Checkout")
        checkout([$class: 'GitSCM', branches: [[name: '*/main']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'gitlab-user-jenkins', url: 'http://dti-gitlab.unilab.edu.br/disir/3s_cicd.git']]])
      } 
    }
    stage('Build Application') {
      steps {
        /*
        sh "mvn clean package"
        sh "mvn clean verify"
        sh 'mvn clean -f spring-boot/'
        sh 'mvn org.apache.maven.plugins:maven-dependency-plugin:3.5.0:tree -Xdebug -f spring-boot/'
        sh 'mvn package install -Dmaven.test.skip=true -Dmy.variable=${APP_NAME} -Dmy.variable=${APP_VERSION} -f spring-boot/'
        */
        sh 'rm docker-compose.yml'
        sh 'ls -la .'
        sh 'ls -la ./source'
        sh 'cp ./source/.env.example ./source/.env.dev && cp ./source/.env.example ./source/.env.prod'
      }
    }
    stage('Build Image Container') {
      steps {
        container('docker') {  
          milestone(ordinal: null, label: "Milestone: Docker Build")
          timeout(time: 60, unit: 'MINUTES') {
            //sh "docker build -f ./Dockerfile -t '$DOCKER_IMAGE':'$DOCKER_TAG' --build-arg='NAME=$APP_NAME' --build-arg='VERSION=$APP_VERSION' --build-arg='COMMIT_SHA=$GIT_COMMIT' --build-arg='BUILDKIT_INLINE_CACHE=1' --cache-from '$DOCKER_IMAGE':'$DOCKER_TAG' ./"
            sh "cd ./source && docker build --target production -f ./Dockerfile -t '$DOCKER_IMAGE:$DOCKER_TAG' --build-arg 'VERSION=$APP_VERSION COMMIT_SHA=$GIT_COMMIT BUILDKIT_INLINE_CACHE=1' --cache-from '$DOCKER_IMAGE:$DOCKER_TAG' ."
          }
        }
      }
    }
    stage('Push Image Container') {
      steps {
        container('docker') { 
          withCredentials([usernamePassword(credentialsId: 'harbor-registro', passwordVariable: 'harborPassword', usernameVariable: 'harborUser')]) {
            sh 'docker login https://dti-registro.unilab.edu.br -u ${harborPassword} -p ${harborUser}'
            milestone(ordinal: null, label: "Milestone: Docker Push")
            timeout(time: 15, unit: 'MINUTES') {
              sh "docker push '$DOCKER_IMAGE:$DOCKER_TAG'"
            }
          }
        }
      }
    }
    stage('Deploy no Kubernetes') {
      steps {
        //sh "sed -i 's/<APP_NAMESPACE>/${env.APP_NAMESPACE}/' ./kubernetes/deployment-3s.yaml"
        
        //sh "sed -i 's/<APP_NAME>/${env.APP_NAME}/' ./kubernetes/deployment-3s.yaml"
        
        //sh "sed -i 's/<CONTAINER_NAME>/${env.APP_NAME}/' ./kubernetes/deployment-3s.yaml"
  
        sh "sed -i 's/:main/:${env.DOCKER_TAG}/' ./kubernetes/deployment-3s.yaml"

        sh 'cat ./kubernetes/deployment-3s.yaml'

        // Oficial docs https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/
        sh 'curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"'
        sh 'curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"'
        sh 'echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check'
        sh "chmod u+x ./kubectl"
        sh "install -o root -g root -m 0755 kubectl /usr/bin/kubectl"
        sh "kubectl version --client -ojson" // apenas para testar a conexão client

        withKubeConfig([credentialsId: 'K8s-c1-config', serverUrl: 'https://10.130.0.45:6443']) {
          /*
          Teoricamente --record não é obrigatório, porém, tecnicamente torna-se obrigatório para garantir que as 
          alterações deixem um rastro de auditoria rudimentar e cumpram o processo SRE e a cultura DevOps.
          Exemplo de uso: kubectl rollout history -n docker deployment.apps/docker
          Nota: Quando --record não é sinalizador, na tabela, CHANGE-CAUSE estará apenas <none>
          */

          /*
          script {
            // verifica deploy ativo e exclui
            sh "kubectl get deployment $APP_NAME -n $APP_NAMESPACE >/dev/null 2>&1 && \
            (kubectl get pods -l $APP_NAME -n $APP_NAMESPACE --no-headers | wc -l) > 0 && \
            kubectl delete pods -l app=$APP_NAME -n $APP_NAMESPACE --force --grace-period=0; \
            kubectl delete deployment $APP_NAME -n $APP_NAMESPACE || echo 'DEPLOYMENT INEXISTENTE!'"
            // aplica novo deploy
            sh "kubectl apply -f ./kubernetes/deployment-3s.yaml --record"

            // verifica deploy ativo e exclui
            sh "kubectl get deployment postgres -n postgres-3s >/dev/null 2>&1 && \
            (kubectl get pods -l postgres -n postgres-3s --no-headers | wc -l) > 0 && \
            kubectl delete pods -l app=postgres -n postgres-3s --force --grace-period=0; \
            kubectl delete deployment postgres -n postgres-3s || echo 'DEPLOYMENT INEXISTENTE!'"
            // aplica novo deploy
            sh "kubectl apply -f ./kubernetes/deployment-postgres-3s.yaml --record"
          }
          //sh "kubectl get nodes"
          sh "kubectl get all,ing -n $APP_NAMESPACE -o wide"
          */
          sh "kubectl get all,ing -n postgres-3s -o wide"
        }
      }
    }
  }
}
