#!/usr/bin/env groovy

def getSecretsHarborConfig(){
  return [[
    engineVersion: 2,
    path: 'secret/harbor/config',
    secretValues: [
    [envVar: 'HARBOR_USERNAME', isRequired: false, vaultKey: 'usuario'],
    [envVar: 'HARBOR_PASSWORD', isRequired: false, vaultKey: 'senha'],
    [envVar: 'HARBOR_REGCRED', isRequired: false, vaultKey: 'regcred'],
    ]
  ]]
}

pipeline {
  agent {
    kubernetes {
      yamlFile './kubernetes/agent/jenkins-agent-pod-k8s.yaml'
      idleMinutes 5
      defaultContainer 'php8'
    }
  }

  options {
    timestamps()
    timeout(time: 24, unit: 'HOURS')
    parallelsAlwaysFailFast()
    rateLimitBuilds(throttle: [count: 3, durationName: 'minute', userBoost: false])
    ansiColor('xterm')
    buildDiscarder(logRotator(numToKeepStr: '20'))
    disableConcurrentBuilds()
  }

  environment {
    /* Application */
    APP_NAMESPACE_TRAI = "app3s-stag"
    INGRESS_NAME = "app3s-laravel"
    IMAGE_PREFIX_NAME = "app-3s"
    TAG = sh(returnStdout: true, script: "git describe --tags --abbrev=0").trim()
    APP_VERSION = "${env.TAG}"
    DOCKER_IMAGE = "dti-registro.unilab.edu.br/unilab/${IMAGE_PREFIX_NAME}"
    DOCKER_TAG = "${env.GIT_BRANCH.split('/')[-1]}"
    BUILD_NUMBER = "${env.BUILD_NUMBER}"
    /* Gerais */
    K8S_CLUSTER = "c1"
    JENKINS_URL = "https://dti-jenkins.unilab.edu.br"
    VAULT_ADDR = "https://dti-vault.unilab.edu.br"
    SONAR_URL = "https://dti-sonar.unilab.edu.br"
  }

  stages {
    stage('Iniciando CI/CD') {
      steps {
        script {
          // executar alguns comandos shell para configurar outros detalhes.
          sh '''
            # Instala pacotes
            apt-get update && apt-get upgrade -y
            apt-get install -y locales sudo curl wget postgresql-client unzip rsync procps git

            # Setup locale
            DEBIAN_FRONTEND=noninteractive dpkg-reconfigure locales
            sed -i 's/# pt_BR.UTF-8 UTF-8/pt_BR.UTF-8 UTF-8/' /etc/locale.gen
            locale-gen pt_BR.UTF-8
            echo LANG=pt_BR.UTF-8 | tee /etc/default/locale
            echo LC_CTYPE=pt_BR.UTF-8 | tee -a /etc/default/locale
            echo LC_ALL=pt_BR.UTF-8 | tee -a /etc/default/locale
            echo LANGUAGE=pt_BR:pt:en | tee -a /etc/default/locale

            # Instala kubectl
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            curl -LO "https://dl.k8s.io/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
            echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
            chmod u+x ./kubectl
            install -o root -g root -m 0755 kubectl /usr/bin/kubectl
            kubectl version --client -ojson

            # Instala Vault
            curl -o vault.zip -k https://releases.hashicorp.com/vault/1.12.1/vault_1.12.1_linux_amd64.zip; yes | unzip vault.zip
          '''

          // Ler cofre (Vault)
          withVault(configuration: [
            engineVersion: 2,
            skipSslVerification: true,
            timeout: 60,
            vaultCredentialId: 'token-admin-vault-plugin',
            vaultUrl: 'https://dti-vault.unilab.edu.br'],
            vaultSecrets: getSecretsHarborConfig()) {
              sh 'touch .env'
              sh "echo 'HARBOR_USERNAME:${env.HARBOR_USERNAME}' > .env"
              sh "echo 'HARBOR_PASSWORD:${env.HARBOR_PASSWORD}' >> .env"
              sh "echo 'HARBOR_REGCRED:${env.HARBOR_REGCRED}' >> .env"
            }

          def envFile = readFile('.env').trim()
          def envLines = envFile.tokenize('\n')
          envLines.each { line ->
            def parts = line.tokenize(':')
            def key = parts[0].trim()
            def value = parts[1]
            env."${key}" = "${value}"
          }

        }
      }
    }

    stage('Build Application') {
      steps {
        script {
          sh '''
            # Instala compose
            curl -sS https://getcomposer.org/installer -o composer-setup.php
            php composer-setup.php --install-dir=/usr/local/bin --filename=composer
            chown -R www-data:www-data /usr/local/bin/composer
            composer install --ignore-platform-reqs --no-interaction --no-progress --no-scripts --optimize-autoloader
            mv .env.example .env
            ls -la .
            ls -la public/
            ls -la storage/
          '''
        }
      }
    }

    stage('Docker Container') {
      steps {
        container('docker') {
          script {
            timeout(time: 30, unit: 'MINUTES') {
              sh """
                echo \${HARBOR_PASSWORD} | docker login --username \${HARBOR_USERNAME} --password-stdin https://dti-registro.unilab.edu.br
                docker pull \${DOCKER_IMAGE}:\${DOCKER_TAG}
              """
            }
          }
        }

      }
    }

    stage('Deploy Treinamento') {
      steps {
        script {

          sh '''
            sed -i "s/aGFyYm9y/${HARBOR_REGCRED}/" ./kubernetes/kustomize/base/secret-regcred.yaml
            sed -i "s/main/${DOCKER_TAG}/" ./kubernetes/kustomize/overlays/training/kustomization.yaml
            # sed -i "s/alfa1/${TAG}-beta/" ./kubernetes/kustomize/overlays/training/configmap.yaml
            kubectl kustomize ./kubernetes/kustomize/overlays/training > /tmp/temp-training.yaml
            cat /tmp/temp-training.yaml
          '''

          withKubeConfig([credentialsId: 'kubeconfig-c1', serverUrl: 'https://dti-k8s-c1.unilab.edu.br:6443']) {
            sh 'kubectl create namespace $APP_NAMESPACE_TRAI --dry-run=client -o yaml | kubectl apply -f -'
            def status = sh(script: 'kubectl get pods -n ${APP_NAMESPACE_TRAI} --field-selector=status.phase=Running --no-headers 2>/dev/null | wc -l', returnStdout: true).trim()
            if (Integer.parseInt(status) > 0) { sh 'kubectl delete -k ./kubernetes/kustomize/overlays/training/ --ignore-not-found --cascade=orphan' }
            sh '''
              kubectl apply -k ./kubernetes/kustomize/overlays/training/ --record
              kubectl get all,ing,pvc,sa,secret -n $APP_NAMESPACE_TRAI -o wide
            '''
            env.APP_URI_STAGING = sh(script: 'kubectl get ingress $INGRESS_NAME -n $APP_NAMESPACE_TRAI -o jsonpath="{.spec.rules[0].host}" | sed "s/^/http:\\/\\//"', returnStdout: true).trim()
            withEnv(["APP_URI=${env.APP_URI_TRAINING}"]) {
              sh 'echo Endpoint: $APP_URI_TRAINING'
            }
          }
        }
      }
    }

  }

  post{
    always {
      echo 'Processo de pipeline finalizado.'
    }

    success {
      echo 'Processo de pipeline BEM-SUCEDIDO.'
      slackSend(color: "good", message: "Pipeline #${env.BUILD_NUMBER} completada com ${currentBuild.currentResult} em ${env.JOB_NAME} (<${env.BUILD_URL}|Mais info...>)")
    }

    failure {
      echo 'Processo de pipeline executado com falha.'
      slackSend(color: "danger", message: "Pipeline #${env.BUILD_NUMBER} finalizada com ${currentBuild.currentResult} em ${env.JOB_NAME} (<${env.BUILD_URL}|Mais info...>)")
    }

  }
}